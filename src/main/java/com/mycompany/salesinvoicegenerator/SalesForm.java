/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.salesinvoicegenerator;

import com.salvesinvoice.model.InvoiceLineTableModel;
import com.salvesinvoice.model.InvoiceHeader;
import com.salvesinvoice.model.InvoiceHeaderTableModel;
import com.salvesinvoice.model.InvoiceLine;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Pumpkin
 */
public class SalesForm extends javax.swing.JFrame implements ActionListener {

     
    private  ArrayList<InvoiceHeader> InvoicesList = new ArrayList<InvoiceHeader>();
    private  ArrayList<InvoiceLine> InvoicesLineList = new ArrayList<InvoiceLine>();

    /**
     * Creates new form SalesForm
     */
    public SalesForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        InvoicesTable = new javax.swing.JTable();
        m_CreateInvoiceBtn = new javax.swing.JButton();
        m_DeleteInvoiceBtn = new javax.swing.JButton();
        m_CustomerNameText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        m_InvoiceNumberLbl = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        m_InvoiceTotalLbl = new javax.swing.JLabel();
        m_InvoiceDateText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        m_InvoiceDetailsTable = new javax.swing.JTable();
        m_SaveBtn = new javax.swing.JButton();
        m_SaveBtn.addActionListener(this);
        m_CancelBtn = new javax.swing.JButton();
        m_CancelBtn.addActionListener(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        m_LoadFileBtn = new javax.swing.JMenuItem();
        m_LoadFileBtn.addActionListener(this);
        m_SaveItemBtn = new javax.swing.JMenuItem();
        m_SaveItemBtn.addActionListener(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InvoicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No", "Date", "Customer", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(InvoicesTable);

        m_CreateInvoiceBtn.setText("Create New Invoice");
        m_CreateInvoiceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_CreateInvoiceBtnActionPerformed(evt);
            }
        });

        m_DeleteInvoiceBtn.setText("Delete Invoice");
        m_DeleteInvoiceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_DeleteInvoiceBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Invoice Number");

        jLabel2.setText("Invoice Date");

        jLabel3.setText("Customer Name");

        m_InvoiceNumberLbl.setText("0");

        jLabel4.setText("Invoice Total");

        m_InvoiceTotalLbl.setText("0");

        m_InvoiceDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No.", "Item Name", "Item Price", "Count", "Item Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(m_InvoiceDetailsTable);

        m_SaveBtn.setText("Save");
        m_SaveBtn.setActionCommand("SaveAction");

        m_CancelBtn.setText("Cancel");
        m_CancelBtn.setActionCommand("CancelAction");

        jMenu1.setText("File");

        m_LoadFileBtn.setText("Load");
        m_LoadFileBtn.setActionCommand("LoadFileAction");
        m_LoadFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_LoadFileBtnActionPerformed(evt);
            }
        });
        jMenu1.add(m_LoadFileBtn);

        m_SaveItemBtn.setText("Save");
        jMenu1.add(m_SaveItemBtn);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(m_CreateInvoiceBtn)
                        .addGap(36, 36, 36)
                        .addComponent(m_DeleteInvoiceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_InvoiceNumberLbl)
                            .addComponent(m_InvoiceTotalLbl)
                            .addComponent(m_InvoiceDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_CustomerNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(m_SaveBtn)
                        .addGap(18, 18, 18)
                        .addComponent(m_CancelBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(m_CreateInvoiceBtn)
                            .addComponent(m_DeleteInvoiceBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(m_InvoiceNumberLbl))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(m_InvoiceDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(m_CustomerNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(m_InvoiceTotalLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(m_SaveBtn)
                            .addComponent(m_CancelBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void m_LoadFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_LoadFileBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_m_LoadFileBtnActionPerformed

    private void m_DeleteInvoiceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_DeleteInvoiceBtnActionPerformed
     
       try
       {
            int invIndex = InvoicesTable.getSelectedRow();
            InvoiceHeader header = InvoiceHeaderTableModel.getInvoicesList().get(invIndex);
            InvoiceHeaderTableModel.getInvoicesList().remove(invIndex);
            InvoicesList.remove(invIndex);
            InvoiceHeaderTableModel tableModel = new InvoiceHeaderTableModel(InvoicesList);
            InvoicesTable.setModel(tableModel);
            InvoicesTable.validate();
       }
       catch(Exception ex)
       {
                            ex.printStackTrace();
                           JOptionPane.showMessageDialog(this,"Error\n" + ex.getMessage() , "Error" , JOptionPane.ERROR_MESSAGE);

       }
       
       
    }//GEN-LAST:event_m_DeleteInvoiceBtnActionPerformed

    private void m_CreateInvoiceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_CreateInvoiceBtnActionPerformed
   
            DateFormat format = new SimpleDateFormat("dd-MM-yyyy", Locale.ENGLISH);
                  try 
                       {
                                Date date = format.parse("20-5-2022");
                                InvoiceHeader header = new InvoiceHeader(InvoicesList.size() + 1 , date , "Tester");
                                InvoicesList.add(header);
                                InvoiceHeaderTableModel tableModel = new InvoiceHeaderTableModel(InvoicesList);
                                InvoicesTable.setModel(tableModel);
                                InvoicesTable.validate();
                       }
                       catch(Exception ex)
                       {
                            ex.printStackTrace();
                           JOptionPane.showMessageDialog(this,"File Not Found Error\n" + ex.getMessage() , "Error" , JOptionPane.ERROR_MESSAGE);
                       }
        
        
    }//GEN-LAST:event_m_CreateInvoiceBtnActionPerformed

    public void displayInvoices()
    {
                               InvoiceHeaderTableModel tableModel = new InvoiceHeaderTableModel(InvoicesList);
                               InvoicesTable.setModel(tableModel);
                               InvoicesTable.validate();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InvoicesTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton m_CancelBtn;
    private javax.swing.JButton m_CreateInvoiceBtn;
    private javax.swing.JTextField m_CustomerNameText;
    private javax.swing.JButton m_DeleteInvoiceBtn;
    private javax.swing.JTextField m_InvoiceDateText;
    private javax.swing.JTable m_InvoiceDetailsTable;
    private javax.swing.JLabel m_InvoiceNumberLbl;
    private javax.swing.JLabel m_InvoiceTotalLbl;
    private javax.swing.JMenuItem m_LoadFileBtn;
    private javax.swing.JButton m_SaveBtn;
    private javax.swing.JMenuItem m_SaveItemBtn;
    // End of variables declaration//GEN-END:variables


   

  public InvoiceHeader findInvoiceByNum(int invNum)
  {
      InvoiceHeader temp = null;
      
      for(InvoiceHeader header : InvoicesList)
      {
          if(header.getInvoiceNumber() == invNum){
              temp = header;
          }
      }
      
      return temp;
      
  }
  
   InvoiceHeader invHeader;
   
   public void LoadFile()
   {
       JOptionPane.showMessageDialog(this,"Please, Select header file!" , "Attention" , JOptionPane.WARNING_MESSAGE);
                 JFileChooser openFile = new JFileChooser("C:\\Users\\Pumpkin\\Desktop\\Sales Invoice Generator");
                 openFile.setAcceptAllFileFilterUsed(true);
                 String[] exts = {"csv"};
                 String description = "supported files: " + Arrays.toString(exts).replace('[', '(').replace(']', ')');
                 openFile.setFileFilter(new FileNameExtensionFilter(description, exts));
                 openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                 int result = openFile.showOpenDialog(this);
                 
                 if(result == JFileChooser.APPROVE_OPTION)
                 {
                     File headerFile = openFile.getSelectedFile();
                     try
                     {
                         FileReader headerFr = new FileReader (headerFile) ;              
                         BufferedReader headBr = new BufferedReader(headerFr);
                         String headerLine  = null;
                         
                         while((headerLine = headBr.readLine()) != null)
                         {
                             String[] headerParts = headerLine.split(",");
                             String invNumStr = headerParts[0];
                             String invDateStr = headerParts[1];
                             String custName = headerParts[2];
                             
                             
                             int invNum = Integer.parseInt(invNumStr);
                             DateFormat format = new SimpleDateFormat("dd-MM-yyyy", Locale.ENGLISH);
                             Date invDate = format.parse(invDateStr);
                             
                             InvoiceHeader invHeader = new InvoiceHeader(invNum ,invDate , custName );
                             
                             InvoicesList.add(invHeader);
                             
                         }
                         
                          JOptionPane.showMessageDialog(this,"Please, Select Lines file!" , "Attention" , JOptionPane.WARNING_MESSAGE);
                          result = openFile.showOpenDialog(this);
                          if(result == JFileChooser.APPROVE_OPTION)
                          {
                               File linesFile = openFile.getSelectedFile();
                               BufferedReader linesBr = new BufferedReader(new FileReader(linesFile));
                               String linesLine  = null;
                               
                               while((linesLine = linesBr.readLine()) != null)
                              {
                                String[] lineParts = linesLine.split(",");
                                String invNumStr = lineParts[0];
                                String ItemName = lineParts[1];
                                String ItemPriceStr = lineParts[2];
                                String ItemCountStr = lineParts[3];


                                int invNum = Integer.parseInt(invNumStr);
                                double ItemPrice = Double.parseDouble(ItemPriceStr);
                                int ItemCount = Integer.parseInt(ItemCountStr);
                                invHeader = findInvoiceByNum(invNum);
                                
                                InvoiceLine invLine = new InvoiceLine(ItemName , ItemPrice , ItemCount , invHeader);
                                invHeader.getLines().add(invLine);
                                InvoicesLineList.add(invLine);
                             
                             }
                             
                               InvoiceHeaderTableModel tableModel = new InvoiceHeaderTableModel(InvoicesList);
                               InvoicesTable.setModel(tableModel);
                               InvoicesTable.validate();
                               
                         
                         
                          }
                          
                            ListSelectionModel selectionModel  = InvoicesTable.getSelectionModel();
                            selectionModel.addListSelectionListener(new ListSelectionListener() {
                            public void valueChanged(ListSelectionEvent e) {
                             
                                   String strSource= e.getSource().toString();

                                    int start = strSource.indexOf("{")+1,
                                    stop  = strSource.length()-1;

                                    int Index = Integer.parseInt(strSource.substring(start,stop));
                                    int Value = InvoicesList.get(Index).getInvoiceNumber();
                                
                                    m_InvoiceNumberLbl.setText(Integer.toString(InvoicesList.get(Index).getInvoiceNumber()));
                                    m_InvoiceDateText.setText(InvoicesList.get(Index).getInvoiceDate().toString());
                                    m_CustomerNameText.setText(InvoicesList.get(Index).getCustomerName());
                                    m_InvoiceTotalLbl.setText(Double.toString(InvoicesList.get(Index).getInvTotal()));
                                    
                                
                                 
                                   ArrayList<InvoiceLine> temp  = new ArrayList<InvoiceLine>();;
                                   for(InvoiceLine line : InvoicesLineList)
                                   {
                                       if(line.getHeader().getInvoiceNumber() == Value)
                                       {

                                                temp.add(line);
                                           
                                               
                                       }
                                   }
                                     if(temp.size() > 0) 
                                     {
                                         InvoiceLineTableModel tableModel = new InvoiceLineTableModel(temp);
                                                m_InvoiceDetailsTable.setModel(tableModel);
                                                m_InvoiceDetailsTable.validate();
                                     }
                                    
                                             
                                
                            }
                           });
                         
                         
                     }
                
                     catch(NumberFormatException ex)
                     {
                          ex.printStackTrace();
                         JOptionPane.showMessageDialog(this,"Number Format Error\n" + ex.getMessage() , "Error" , JOptionPane.ERROR_MESSAGE);

                     }
                     catch(ParseException ex)
                     {
                          ex.printStackTrace();
                         JOptionPane.showMessageDialog(this,"Parse Error\n" + ex.getMessage() , "Error" , JOptionPane.ERROR_MESSAGE);

                     }
                     catch(FileNotFoundException ex)
                     {
                          ex.printStackTrace();
                         JOptionPane.showMessageDialog(this,"File Not Found Error\n" + ex.getMessage() , "Error" , JOptionPane.ERROR_MESSAGE);

                     }
                     
                     catch(Exception ex)
                     {
                         ex.printStackTrace();
                         JOptionPane.showMessageDialog(this,"Date Format Error\n" + ex.getMessage() , "Error" , JOptionPane.ERROR_MESSAGE);
                     }
                     
                      System.out.println(invHeader.toString());

                 }
   }
  public void actionPerformed(ActionEvent e) {
  
        switch(e.getActionCommand())
        {
             case "LoadFileAction":
                 LoadFile();
                 break;
                
                 
                 
        }
  }

}


